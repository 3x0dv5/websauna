===================
Database management
===================

Managing SQL database
=====================

Websauna uses Alembic `<https://alembic.readthedocs.org/>`_ database migration tool to manage changes to SQLAlchemy models and SQL databases. These changes include creating new tables for models, adding columns to models and changing column types. For your convenience, most of the migrations can be autogenerated <https://alembic.readthedocs.org/en/latest/autogenerate.html>`_ so that you don't need to manually write and run SQL scripts when you change your tables.

* Alembic is run through Websauna compatibility script ``ws-alembic``.

* ``ws-alembic`` automatically picks changes to your models and generates the corresponding migration scripts which will drive changes to the database

Furthermore

* Websauna itself and all Websauna packages have ``alembic`` folder where the migration scripts are generated

* An Alembic initialization script ``env.py`` is dropped in when you create the project using the scaffold

Creating initial migration
--------------------------

Run::

    ws-alembic -c development.ini revision --autogenerate -m "Initial migration"

This will read your existing models from Websauna applications and generate a Python script in ``alembic/versions/xxxx_initial_migration.py``

Running initial migration
-------------------------

Run::

To inspect the tables have been created you can open pgcli shell::

    ws-db-shell development.ini

Add type in PostgreSQL command list tables::

    \dt

Inspect the output to see your tables have been update.

And then quit pgcli::

    \q

Creating further migrations
---------------------------

xxx

Bringing unmanaged tables under migration control
-------------------------------------------------

If you have prior tables which where introduced before Websauna was part of your project, or you used ``ws-sync-db`` command you need to inform Alembic about the current state of the database.

Managing Redis database
=======================

Websauna itself does use or provide any support for schemaful data in Redis at the moment. There are no any specific tools you need for managing data in Redis.

Back ups
========

A sample backup script and Celery job is provided with Websauna.

Advanced
========

Accessing SQLAlchemy engine object
----------------------------------

    from websauna.system.model import DBSession
    engine = DBSession.get_bind()

Printing out table creation schemas from command line
-----------------------------------------------------

This is sometimes useful for manual migrations.

In the shell::

    from sqlalchemy.schema import CreateTable
    from websauna.system.model import DBSession

    engine = DBSession.get_bind()
    model_class = Delivery

    table_sql = CreateTable(model_class.__table__).compile(engine)
    print(table_sql)

Troubleshooting
===============

NameError: name 'datetime' is not defined
-----------------------------------------

If your have DateTime columns in your models, they might refer to Python's ``datetime`` for timezone information.

Example::

    sa.DateTime(timezone=datetime.timezone.utc)

Alembic creates migration scripts for these, but fails to insert ``datetime`` import statement. Thus, after running *autogenerate* you need to edit the resulting Python script and add the statement::

    import datetime
