.. _static:

=============
Static assets
=============

.. contents :: :local:

Introduction
============

In web development, static asset refer to JavaScript, CSS and image files which are part of the website, but not usually generated by the web server itself. Static assets come with caching mechanisms to make websites load faster. Furthermore caching mechanisms come with cache busting mechanisms to make sure that when you update your website all connected clients get updated versions of static assets.

Referring static assets
=======================

Use :py:meth:`pyramid.request.Request.static_url`. In templates use :ref:`static_url filter <filter-static_url>`.

.. code-block:: html+jinja

    <link rel="stylesheet" href="{{ 'websauna.system:static/theme.css'|static_url }}">

    <img src="{{ 'myapp:static/logo.png'|static_url }}" alt="myapp">

The return value of ``static_url`` can be a random string depending on configured cache busting policy on the production server.

Adding static assets
====================

:py:attr:`websauna.system.Initializer.static_asset_policy`` has a method :py:meth:`websauna.system.http.DefaultStaticAssetPolicy.add_static_view` to map folders in Python packages as static asset source folders. :py:meth:`websauna.system.http.DefaultStaticAssetPolicy.add_static_view` is similar as underlying :py:meth:`pyramid.configurator.Configurator.add_static_view`, but it also includes cache busting mechanism added on these views.

In your Initializer, override :py:meth:`websauna.system.Initializer.configure_static` to have more static views added

.. code-block:: python

    def configure_static(self):
        self.static_asset_policy.add_static_view('myapp-static', 'myapp:static')

You need to have a folder ``static`` inside a Python module ``myapp``.

Development web server runs without caching
===========================================

The development web server using :ref:`development.ini` does not have any kind of cache busting configured. HTTP responses do not have cache headers. Static URLs are not mangled in whatsoever manner.

Default cache busting mechanism
===============================

The default cache busting mechanism is

* Designed to be simple. Works on any web server with file system write access.

* Hot deploys friendly, so that a website update does not break client browsers which are currently downloading static assets.

When you deploy a new version of website you need to run :ref:`ws-collect-static` command. This will scan all configured static folders and create permantent, MD5 hashed, copies of all files. If the content of the file changes, its MD5 hash changes, and :py:meth:`pyramid.request.Request.static_url` can give a different URL pointing to the asset. Having a different URL invalidates the client cache.

The default cache busting mechanism has three settings

* :ref:`websauna.collected_static_folder` - a file system folder where collected static files go. Defaults to ``collected-static`` under the Websauna application package root.

* :ref:`websauna.cache_max_age` - how many seconds the items are cached in a web browser


Using CDN
=========

`See example in Pyramid documentation <http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/assets.html?highlight=cache#path-segments-and-choosing-a-cache-buster>`_

More information
================

`Static assets and cache busting in Pyramid documentation <http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/assets.html>`_.

