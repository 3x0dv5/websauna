========================
Users, login and sign up
========================

Websauna provides subsystems for managing site users, logging in and signing up.

.. contents :: local:

Introduction
============

Websauna supports different user sources like site's own sign up form or Facebook login. The user data storage is abstracted. Users can be stored in an internal SQL database storage, LDAP server or any pluggable user source. Websauna comes with a default :term:`SQLAlchemy` user and group models which allow you to get started quickly.

Default Bootstrap templates are provided for sign in, sign up and password reset.

Service architecture
====================

Login and sign up process consists of different services which are registered as components in :py:meth:`websauna.system.Initializer.configure_user_models`. Each of the services can be individually overridden and customized for your specific needs.

* User registry

* Registration service

* Login service

* Credential activity service (password resets, etc.)

* :doc:`OAuth login services <./oauth>` (social media logins)

Customizing user flow
=====================

Default user model
------------------

The default user model is :py:class:`websauna.system.user.models.User`. It is good for basic site bootstrapping, but eventualy you want to extend it for your own purposes.

All users are signed up and logged in via email/password. There is a ``username`` field, but it is autogenerated default. If you are building e.g. a forum and wish to users choose their own usernames you can edit this field in profile or ask on the sign up form. Also this model is easier to adopt users for external sources, like Facebook.

The most important attributes of the default model are

* ``friendly_name`` - this property tries to give out the most friendlist choice from full name, email username

* ``full_name`` - human name of the user

* ``id`` - human readable id, visible only for admins - never expose this to the site visitors

* ``uuid`` - randomized id, user all over the public site

* ``user_data`` - JSONB dictionary, can hold any arbitrary data

* ``activation`` - any pending :py:class:`websauna.system.user.model.Activation` token for email activation, password reset

Abstract user registry
----------------------

:py:class:`websauna.system.user.userregistry.DefaultEmailBasedUserRegistry` maintains users in the database. By default this is done by using a :term:`SQLAlchemy` model :py:class:`:websauna.system.user.userregistry.DefaultEmailBasedUserRegistry`. ``UserRegistry`` users can be based on anything - you can store users in LDAP, Cassandra, you-name-it.

Creating your own user class
----------------------------

If you just want to roll your own SQLAlchemy model for the user, you can do it by overriding :py:meth:`websauna.system.Initializer.configure_user_models`. and registering your own::

    def configure_user_models(self):
        # ... lot of copy paste from parent function ...

        from websauna.system.user.interfaces import IUserModel

        registry = self.config.registry
        registry.registerUtility(myapp.models.User, IUserModel)
        # ... lot of copy paste from parent function ...

This assumes the model is compatible with the default site user flow and has attributes like ``user.email`` and ``user.password``. It is safe to inherit from the base :py:class:`websauna.system.user.usermixin.UserMixin` if you are not building user system from the scratch.

Login service
-------------

Login service is responsible for email/password and username/password logins. Unlike other related services, the login service must have knowledge of user model internals.

See :py:class:`websauna.system.user.loginservice.DefaultLoginService`.

You can override this in :py:meth:`websauna.system.Initializer.configure_user`.

Default views are found in :py:mod:`websauna.system.user.views`.

Registration service
--------------------

Registration service is responsible for users created through sign up form. Registration service does not know about user implementation and only interacts with user registry.

See :py:class:`websauna.system.user.registrationservice.DefaultRegistrationService`.

You can override this in :py:meth:`websauna.system.Initializer.configure_user`.

Default views are found in :py:mod:`websauna.system.user.views`.

Credential activity service
---------------------------

Credential activity service is responsible for password reset requests. Credential activity service does not know about user implementation and only interacts with user registry.

See :py:class:`websauna.system.user.credentialactivityservice.DefaultCredentialActivityService`.

You can override this in :py:meth:`websauna.system.Initializer.configure_user`.

Default views are found in :py:mod:`websauna.system.user.views`.

Groups
======

The default user implementation has groups. User can be member of any number of groups.

`Pyramid ACL <http://docs.pylonsproject.org/projects/pyramid/en/latest/tutorials/wiki/authorization.html>`_ is used to assign permissions for groups.

Events
======

Various events are fired during the user sign up and log in.

See

* :py:mod:`websauna.system.user.events`

* :py:mod:`horus.events`

Examples
========

Creating a user
---------------

For creating users see :py:func:`websauna.tests.utils.create_user` or :py:mod:`websauna.system.devop.scripts.createuser`.

Getting the logged in user
--------------------------

The logged in user can be accessed ``request.user`` which gives you a :py:class:`websauna.system.user.model.User` instance. This is set to ``None`` for anonymous users.

Advanced
========

Horus legacy
------------

.. note ::

    Currently there are various references to Horus package internally, but they are expected to cleaned up in the future versions.



