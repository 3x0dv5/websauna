===================
Database management
===================

Managing SQL database
=====================

Websauna uses Alembic `<https://alembic.readthedocs.org/>`_ SQLAlchemy migration tool to reflect changes to made to models into SQL databases. These changes include creating new tables for models, adding columns to models and changing column types. For your convenience, most of the migrations can be autogenerated <https://alembic.readthedocs.org/en/latest/autogenerate.html>`_ so that you don't need to manually write and run SQL scripts when you change your tables.

* Alembic is run through Websauna compatibility script ``ws-alembic``.

* ``ws-alembic`` automatically picks changes to your models and generates the corresponding migration scripts which will drive changes to the database

Furthermore

* Websauna packages have ``alembic`` folder where the migration scripts are generated. This is generated by the project scaffold, but you can add one yourself easily.

* An Alembic initialization script ``env.py`` is dropped in when you create the project using the scaffold

Differences between ws-alembic and native alembic commands
----------------------------------------------------------

Websauna provides its own wrapper script ``ws-alembic`` which behaves similarly as Alembic package's ``alembic`` command. The differences are that

* ``ws-alembic`` is designed to read your project's settings file instead of custom ``alembic.ini``

* ``ws-alembic`` honours settings includes

* ``ws-alembic`` honours log settings

Migrations
==========

What are migrations?
--------------------

TODO

Creating initial migration
--------------------------

Preface: You have created some database models and run them into the production system using ``ws-sync-db``. Now you need to add more models to your application. Before adding any new models, columns, you need to store the current application model state as the initial Alembic migration.

If your Python package does not have ``alembic`` folder create one::

    ws-alembic -c development.ini init alembic

This wills create ``alembic`` folder for you. Then replace the ``alembic/env.py`` file with::

    from websauna.system.devop import alembic
    alembic.run_alembic(package="yourpackagenamehere")

If you have an existing development database, back it up and clear it out. This forces Alembic to tabula rasa state and it thinks all the migrations need to be created, even though there might be existing tables already in the production. To backup the existing database and create empty one you can do::

    ws-db-shell development.ini

    # Create a backup of current development data
    CREATE DATABASE websauna_copy WITH TEMPLATE websauna;

    # Drop all tables, views, etc. in PostgreSQL
    DROP SCHEMA public CASCADE; CREATE SCHEMA public;

    # Quit PostgreSQL CLI
    \q

Then store the state of the current model system as the initial migration::

    ws-alembic -c development.ini revision --autogenerate -m "Initial migration"

This will read your existing models from Websauna applications and generate a Python script in ``alembic/versions/xxxx_initial_migration.py`` which you can use to populate the empty database.

Now you can return back to the original database::

    ws-db-shell development.ini

    # Disconnect from the current database, connect to copy
    \c websauna_copy;

    # Drop the database we originally used to create the migration files
    DROP DATABASE websauna;

    # Get back to the business with the backup
    CREATE DATABASE websauna WITH TEMPLATE websauna_copy;

    # Quit PostgreSQL
    \q


Creating first migration
------------------------

Preface: You have created initial migration as instructed above. Now, you edit your source code by introducting new models or columns. Now it is time to generate the code which updates the database to have those features.

First edit your ``models.py`` to contain new models and columns. Do **not** run ``ws-sync-db``.

Run::

    ws-alembic -c development.ini revision --autogenerate -m "Adding Offer model for managing deals"

This will update Python scripts in ``alembic/versions`` folder.

.. note ::

    Always manually inspect generated migration scripts after they have been created with revision --autogenerate. Sometimes the automatic logic fails to correctly detect database changes.

Backup your database before running a migration::

    ws-dump-db > dump.sql

Then run the script against the database::

    ws-alembic -c development.ini upgrade head

You can now manually inspect that the table was created::

    ws-db-shell development.ini

Add type in PostgreSQL command list tables::

    \dt

Inspect the output to see your tables have been update.

And then quit pgcli::

    \q

Creating further migrations
---------------------------

Repeat the tasks of creating the first migration.

Running a migration on the production server
--------------------------------------------

Preface: You have created a migration script and deployed the migration script and changed model Python files on the production server. Now you wish to run the migration in the production.

Backup your database before running a migration::

    ws-dump-db > dump.sql

Checkout the migration scripts from ``alembic`` directory on the production server, without upgrading the full codebase. We do not want to pull in models which do not have persistent data models created for them yet::

    git fetch
    git checkout origin -- alembic

Then run the script against the database::

    ws-alembic -c production.ini upgrade head

Now the database is prepared for the upcoming code update. Proceed to update the rest of the codebase and restart the services.

Fixing a migration
------------------

In the case your initial attempt to migrate was not succesful, e.g. you forgot to add some columns, you can unwind the migration and construct it again.

List the current migrations::

    ws-alembic -c development.ini history

    37e1cb6de47 -> 2d970929c35 (head), Adding offers
    <base> -> 37e1cb6de47, Initial migration

We are in head, let's go back to the base::

     ws-alembic -c development.ini downgrade 37e1cb6de47

Let's delete `2d970929c35_xxx.py`` migration script.

Edit ``models.py`` to add the missing fields.

Regenerate the migration script with fixes::

    ws-alembic -c development.ini revision --autogenerate -m "Adding Offer model for managing deals"

Then run the fixed script::

    ws-alembic -c development.ini upgrade head

Running migrations for a third party package
============================================

Activate your installation virtualenv. You can enter to the package source directory, then run *ws-alembic* command, pointing it to the configuration of your site.

Example::

    # Enter the staginginstallation folder
    cd /srv/pyramid/project

    # Activate virtualenv
    source venv/bin/active

    # Go to third party package source folder
    cd venv/src/websauna.referral

    # Run the Alembic using alembic.ini from the third party package, but the configuration file of your installation
    ws-alembic -c /srv/pyramid/trees/staging.ini upgrade head

Back ups
========

A sample backup script and Celery job is provided with Websauna.

To restore PostreSQL dump first create the database. Then run::

Advanced
========

Accessing SQLAlchemy engine object
----------------------------------

    from websauna.system.model import DBSession
    engine = DBSession.get_bind()

Printing out table creation schemas from command line
-----------------------------------------------------

This is sometimes useful for manual migrations.

In the shell::

    from sqlalchemy.schema import CreateTable
    from websauna.system.model import DBSession

    engine = DBSession.get_bind()
    model_class = Delivery

    table_sql = CreateTable(model_class.__table__).compile(engine)
    print(table_sql)

Creating migrations for reusable library
----------------------------------------

If you are going to make a library, as opposite to developing in-house application, some extra care needs to be taken with migration script release. The current Alembic approach adds ``DROP TABLE`` statement to all tables the migration script does not know about. In the application specific context this means default Websauna tables (*users*, *group*, etc.) and the migration script would try to drop them.

The solution is to hand edit migration script after ``ws-alembic --autogenerate`` so that you cut out drop table statements which are not relevant.

Troubleshooting
===============

Force Alembic autogenerate to consider models from all packages
---------------------------------------------------------------

By default ``ws-alembic -c development.ini revision --autogenerate`` only looks up models and tables specific to your current package (`otherwise a lot of extra DROP table statements would be generated <http://stackoverflow.com/questions/31196631/alembic-when-autogenerating-migrations-how-to-ignore-database-tables-by-other-p>`_). However, sometimes this behavior is not desirable when cross-package references are foreign keys are considered. You can disable this behavior with ``ALEMBIC_ALL_PACKAGES`` environment variable::

     ALEMBIC_ALL_PACKAGES=true ws-alembic -c development.ini revision --autogenerate -m "Adding referral program column to subscriber"

... and then hand edit the resulting migration script to remove unnecessary migration statements.

NameError: name 'datetime' is not defined
-----------------------------------------

This error can appear when you try to run your Alembic migration script. If your have DateTime columns in your models, they might refer to Python's ``datetime`` for timezone information.

Example::

    sa.DateTime(timezone=datetime.timezone.utc)

Alembic creates migration scripts for these, but fails to insert ``datetime`` import statement. Thus, after running *autogenerate* you need to edit the resulting Python script and add the statement::

    import datetime

FAILED: No such revision or branch 'xxx'
----------------------------------------

This error may appear if you try to run migrations on a database with ``upgrade head`. The ``alembic_version`` database table has gotten out of the sync with the actual migration scripts and their ids.

The course of the actions is to drop ``alembic_version`` database table and reset the current migration pointer to the migration script matching your database.

Backup your database before doing hardcore database manipulation:

    ws-dump-db staging.ini > dump.sql

Drop the alembic migration pointer table::

    ws-db-shell staging.ini

    DROP TABLE alembic_version

    \q

Output the available migration script versions::

    ws-alembic -c staging.ini history

    # Example output:
    37e1cb6de47 -> 3ca5462d497 (head), Adding Offer model for managing deals
    <base> -> 37e1cb6de47, Initial migration

Update the alembic migration pointer::

    ws-alembic -c staging.ini stamp 37e1cb6de47

Run migrations. Now it should pick migrations from 37e1cb6de47 and run all the way to the latest migration::

    ws-alembic -c staging.ini upgrade head

Alternatively, you can also try to fix version history by directly manipulating Alembic history in PostgreSQL::

    update alembic_history_trees set version_num="3dd2f080895";
