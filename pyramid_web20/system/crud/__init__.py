"""CRUD based on SQLAlchemy and Deform."""
from abc import abstractmethod, abstractproperty
from pyramid_web20.system.core import traverse



class CRUD(traverse.Resource):
    """Define create-read-update-delete interface for an model.

    We use Pyramid traversing to get automatic ACL permission support for operations. As long given CRUD resource parts define __acl__ attribute, permissions are respected automatically.

    URLs are the following:

        List: $base/listing

        Add: $parent/add

        View: $parent/$id

        Edit: $parent/$id/edit

        Delete: $parent/$id/delete
    """

    # How the model is referred in templates. e.g. "User"
    title = "xx"

    #: Listing description object presenting $base/listing traversing part. Maps to show view
    listing = None

    def is_good_id(self, id):
        """Check if the given traverse id can belong to object.

        This is used to filter out bad __getitem__ accesses generated by Jinja template engine which first tries to do dictionary look up before doing function look up, making it impossible to call admin functions.
        """
        return type(id) == int

    def wrap_to_resource(self, obj):
        """Take raw model instance and wrap it to Resource for traversing.

        :param obj: SQLALchemy object or similar model object.
        :return: :py:class:`pyramid_web20.core.traverse.Resource`
        """

        # Use internal Resource class to wrap the object
        if hasattr(self, "Resource"):
            return self.Resource(obj)

        raise NotImplementedError("Does not know how to wrap to resource: {}".format(obj))

    def make_instance(self, obj):
        # Wrap object to a traversable part
        instance = self.wrap_to_resource(obj)
        instance.make_lineage(self, instance, instance.get_id())
        return instance

    def traverse_to_object(self, id):
        """Wraps object to a traversable URL.

        Loads raw database object with id and puts it inside ``Instance`` object,
         with ``__parent__`` and ``__name__`` pointers.
        """

        # First try if we get an view for the current instance with the name


        obj = self.fetch_object(id)
        return self.make_instance(obj)

    def __getitem__(self, id):
        return self.traverse_to_object(id)

    @abstractmethod
    def fetch_object(self, id):
        """Load object from the database for CRUD path for view/edit/delete."""
        raise NotImplementedError("Please use concrete subclass like pyramid_web20.syste.crud.sqlalchemy")



class CRUDResourcePart(traverse.Resource):
    """A resource part of CRUD traversing."""

    template = None

    def get_crud(self):
        return self.__parent__

    def get_model(self):
        return self.__parent__.get_model()


class Resource(traverse.Resource):
    """Maps an object under CRUD view/edit/delete control to traverse path.

    Presents an underlying model instance mapped to an URL path. Parent object points to a CRUD instance.
    """

    def __init__(self, obj):
        self.obj = obj

    def get_object(self):
        """Return wrapped database object."""
        return self.obj

    @abstractmethod
    def get_id(self):
        """Extract id from the self.obj for traversing."""
        raise NotImplementedError()

    def get_model(self):
        return self.__parent__.get_model()

    def get_title(self):
        """Title used on view, edit, delete, pages."""
        return self.get_id()

